\documentclass{article}
\usepackage[utf8]{inputenc} %unicode support
\usepackage{booktabs}
\usepackage{fixltx2e}



\begin{document}

<<global_options, include=FALSE>>=
library(knitr)
knitr::opts_chunk$set(eval = TRUE, cache = TRUE)
knitr::opts_chunk$set(dev.args = list(pointsize = 11),
                      fig.align = 'center',
                      fig.path = '')
@


\section[Introduction]{Introduction}
Before each statistical analysis, data cleaning is often required to ensure good data quality.
Data cleaning is the process of detecting errors and inconsistencies in data sets \citep{Chapman\_2005}.
In practice, the data cleaning step is often more time consuming than the subsequent statistical analysis, particularly, when the analysis relies on the joining of multiple data sources.

When dealing with chemical data sets (e.g.\ environmental monitoring data, toxicological data), a first step is often to validate the names of chemicals or to link them to unique codes that simplify subsequent querying and appending of compound-related physico-chemical or toxicological information.
Several web sources provide chemical names or link them to unique codes (see also section \emph{Data sources} below).
However, manual searching for each compound, often through a graphical web interface, is tedious, error-prone and not reproducible \citep{Peng_2009}.

To simplify, robustify and automate this task, i.e.\ to search and retrieve chemical information from the web, we created the webchem package for the free and open source R language \citep{r_2015, Wehrens_2011}.
R is one of the most widely used software environments for data cleaning, analysing and visualising data, and supports full reproducibility of each step \citep{Marwick_2016}.

In the following, we describe the basic functionality of the package and demonstrate with a few use cases how to clean and retrieve new data with webchem.


\section[Implementation and design details]{Implementation and design details}
The webchem package is written entirely in R and available under a MIT license.
The development repository is hosted on \citet{github} and a stable version is released on the official R repository \citep{cran}.
webchem is part of the rOpenSci project \citep{boettiger2015building}, which aims at fully reproducible data analysis.

webchem follows best practices for scientific software \citep{wilson_best_2014, poisot_best_2015}, namely: (i) a public available repository with easy collaboration and an issue tracker (via GitHub), (ii) a non-restrictive license, version control (git), (iii) an elaborate test-suite covering more than 90\% of the relevant lines of code (currently approximately 1500 lines, using testthat \citep{wickham_testthat:_2011}), (iv) continuous integration (via \citet{travis-ci} and \citet{appveyor}; testing on Linux \& Windows with current and development R versions), (v) in-source documentation (using roxygen2 \citep{wickham_roxygen2:_2015}) and (vi) compliance with a style guide \citep{wickham_advanced_2015}.

webchem builds on top of the following R packages:
RCurl \citep{lang_rcurl:_2015} and httr \citep{wickham_httr} for data transfer,
stringr \citep{wickham_stringr:_2015} for string handling,
xml2 \citep{wickham_xml2} and rvest \citep{wickham_rvest} for parsing HTML and XML,
jsonlite \citep{ooms_jsonlite_2014} for parsing JSON,
rcdk \citep{guha_rcdk} for parsing SMILES.
For parsing molfiles we use a lightweight implementation of \citep{Grabner_Varmuza_Dehmer_2012}.

Some data sources provide application programming interfaces (API).
Web APIs define functions that allow accessing services and data via http and return data in a specific way.
webchem uses the API of a data source provider, where available.
For sources where an API is lacking, data is directly searched and extracted from the web pages, analogous to manual interaction with a website.

Only few design decisions have been made:
Each function name has a prefix and suffix separated by an underscore \citep{Chamberlain_Szocs_2013}.
They follow the format of \code{source\_function}, e.g.\ \code{cs\_compinfo} uses ChemSpider as source (see next section) to retrieve compound information.
Some functions require querying first a unique identifier from the data source and then use this identifier to query further information.
The prefix \code{get} is used to denote these functions, e.g.\ \code{get\_csid} to retrieve the identifier used in ChemSpider.

webchem is friendly to the resources of data providers. 
Between each request there is a time-out of 0.3 to 2 seconds depending on the data source. 
Therefore, processing of larger data sets can take some time, but still represents a major improvement compared to manual lookup.
We provide a link to the \emph{Terms of Use} of data providers in the documentation of each function and we encourage the users to read these before using webchem.
Moreover, all functions return an URL of the source, which can be used for \mbox{(micro-)attribution}.


\section[Data sources]{Data sources}
The backbone of webchem are data sources providing their data and functionality to the public.
Currently, data can be retrieved from 11 sources.
These cover a broad spectrum of available data, like identifiers, experimental and predicted properties and regulatory information (Figure~\ref{fig:fig1}, a detailed overview of all sources is included as supplement):

\begin{description}
  \item[NIH Chemical Identifier Resolver (CIR) \citep{cir}]{A web service that converts from and to various chemical identifiers.}
  \item[Chemical Translation Service (CTS) \citep{Wohlgemuth_Haldiya_Willighagen_Kind_Fiehn_2010}]{A web service that converts from and to various chemical identifiers.}
  \item[ETOX \citep{etox}]{Information System Ecotoxicology and Environmental Quality Targets by the German Federal Environmental Agency. Provides basic identifiers, synonyms, ecotoxicological data and quality targets for different countries.}
  \item[PAN Pesticide Database \citep{pan}]{Information on pesticides - provides basic identifiers, ecotoxicological data and chemical properties.}
  \item[SRC Physprop \citep{physprop}]{Contains physical properties for over 41,000 chemicals.
  Physical properties collected from a wide variety of sources including experimental and modeled values.}
  \item[PubChem \citep{Kim_2016}]{PubChem is a public repository for information on chemical substances, providing identifiers, properties and synonyms.
  We use an interface to the PUG-REST web service \citep{Kim_Thiessen_Bolton_Bryant_2015}.}
  \item[Wikidata \citep{wiki}]{Wikipedia contains information for over 15,000 chemicals \citep{Ertl_Patiny_Sander_Rufener_Zasso_2015}. Currently webchem can only query chemical identifiers.}
  \item[Compendium of Pesticide Common Names \citep{wood}]{The compendium provides information on pesticide common names, identifiers and classification.}
  \item[ChemID\emph{plus} \citep{Tomasulo_2002}]{is a large web-based database provided by the National Library of Medicine. It provides identifiers, synonyms, toxicological data and chemical properties.}
  \item[ChemSpider \citep{pence_chemspider:_2010}]{is a free chemical structure database providing access to over 40 million structures. It provides identifiers, properties and can also be used to convert identifiers.}
  \item[OPSIN  \citep{Lowe_Corbett_Murray-Rust_Glen_2011}]{The Open Parser for Systematic IUPAC nomenclature is a chemical name interpreter and provides InChI and SMILES identifiers.}
\end{description}

Though the data sources exhibit some overlap in the provided information, each has been selected because it also provides unique information and we encourage the interested reader to consult the related source for details. 
However, we provide a brief overview in the Supporting Information.

\begin{figure}[ht]
  \centering
  \includegraphics{fig1}
  \caption{Overview of current data sources. Input and output possibilities currently implemented in the package.}
  \label{fig:fig1}
\end{figure}


\section[Use cases]{Use cases}
\subsection[Install webchem]{Installation}
webchem can be easily installed and loaded from CRAN:

<<install, eval=FALSE>>=
install.packages("webchem")
library("webchem")
@

<<load, echo=FALSE, eval=TRUE>>=
library(webchem)
library(ggplot2)
library(xtable)
@


The package is under active development. The latest development version is available from GitHub and also permanently available at \citet{zenodo}.
This document has been created using webchem version 0.1.


\subsection[Sample data sets]{Sample data sets}
To demonstrate the capabilities of  webchem we use two small publicly available real world data sets.
The data sets are only used for purpose of demonstration, have been slightly preprocessed (not shown) and are available through the package.

(i) \code{jagst}: This data set comprises environmental monitoring data of organic substances in the river Jagst, Germany, sampled in 2013.
The data is publicly available and can be retrieved from \citetalias{lubw_2016}.
It comprises concentrations  (in $\mathrm{\mu g~/~L}$) of  34 substances  on 13 sampling occasions.
First we load the data set and inspect the first six rows:

<<loadjagst>>=
data("jagst")
head(jagst)
@

This data set identifies substances only by substance names. Values below the limit of quantification (LOQ) are indicated by a qualifier column.

(ii) \code{lc50}: This data consists of median acute lethal concentration for the water flea \textit{Daphnia magna} in 48 h tests ($LC_{50, D.magna, 48h}$) of 124 insecticides.
The data has been retrieved from the EPA ECOTOX database \citep{epa_2016}.

<<load_lc50>>=
data("lc50")
head(lc50)
@

This data set identifies the substances only by CAS numbers.


\subsection[Query identifiers]{Query identifiers}
The \code{jagst} data set covers 34 substances that are identified by (German) names.
Merging and linking these to other tables is hampered by differences and ambiguity in compound names.

One possibility to resolve this, is to use different chemical identifiers allowing easy identification.
There are several identifiers available, e.g.\  registry numbers like CAS or EC, database identifiers like PubChemCID \citep{Kim_2016} or ChemSpiderID \citep{pence_chemspider:_2010}, line notations like SMILES \citep{Weininger_1990}, InChI and InChiKey \citep{Heller_McNaught_Pletnev_Stein_Tchekhovskoi_2015}. 
In this first example we query several identifiers to create a table that can be used as (i) supplemental information to a research article or (ii) to facilitate subsequent matching with other data.

As we are are dealing with German substance names we start to query ETOX for CAS registry numbers.
A common work flow when dealing with web resources is to 1) query a unique identifier of the source, 2) use this identifier to retrieve additional information and 3) extract the parts that are needed from the R object \citep{Chamberlain_Szocs_2013}.

First we search for ETOX internal ID numbers using the substance names:

<<get_etoxid, message=FALSE, cache=TRUE>>=
subs <- unique(jagst$substance)
ids <- get_etoxid(subs, match = 'best')
head(ids)
@

Only three substances could not be found in ETOX. 
Here we specify that only the \emph{`best'} match (in terms of the Levenshtein distance between query and results) is returned. 
A manual check confirms appropriate matches. 
Other options include: \emph{`all'} - returns all matches; \emph{`first'} - returns only the first match (not necessarily the best match); \emph{`ask'} - this enters an interactive mode, where the user is asked for a choice if multiple matches are found and \emph{`na'} which returns \code{NA} in case of multiple matches.

We use these data to retrieve basic information on the substances.

<<etox_basic, message=FALSE>>=
etox_data <- etox_basic(ids$etoxid)
@

webchem always returns a named list (one entry for each substance) and the available information content can be very voluminous.
Therefore, we provide extractor functions for the common identifiers: CAS, SMILES and InChIKeys.
<<etox_cas, message=FALSE>>=
etox_cas <- cas(etox_data)
head(etox_cas)
@

A variety of data are available and we cannot provide extractor functions for each of those.
Therefore, if users need to extract other data, they have to write simple extractor functions (see following examples).

In the same manner, we can now query other identifiers from another source using these CAS numbers (Figure~\ref{fig:fig1}), like PubChem
<<token, echo=FALSE>>=
# this is a webchem specific token. 
# Please use it only for reproduction / testing.
token <- '37bf5e57-9091-42f5-9274-650a64398aaf'
@

<<pubchem, message = FALSE, warning=FALSE>>=
cids <- get_cid(etox_cas)
pc_data <- pc_prop(cids, properties = c('CanonicalSMILES'))
pc_smiles <- smiles(pc_data)
@

or ChemSpider
<<chemspider, message=FALSE, warning=FALSE>>=
csids <- get_csid(etox_cas, token = token)
cs_data <- cs_compinfo(csids, token = token)
cs_inchikey <- inchikey(cs_data)
@

Finally, we combine the queried data into one data.frame
<<table>>=
res <- data.frame(name = subs, cas = etox_cas, smiles = pc_smiles, 
  cid = pc_data$CID, inchikey = cs_inchikey, csid = cs_data$csid, 
  stringsAsFactors = FALSE)
@

Note that in order to use the ChemSpider functions, a personal authentication key (\code{token}) is needed, which can be retrieved from the ChemSpider web page. 
Finally, we obtain a compound table containing many different identifiers (Table~\ref{tab:comptable}), allowing easy identification and merging with other data sets, e.g.\ the \code{lc50} data set based on CAS.

\begin{table}[ht]
\centering
<<print_table, echo=FALSE, results = 'asis'>>=
tmp <- res[1:6, ]
tmp$smiles <- ifelse(is.na(tmp$smiles), NA, paste0(substr(tmp$smiles, 1, 7), '...'))
tmp$inchikey <- ifelse(is.na(tmp$inchikey), NA, paste0(substr(tmp$inchikey, 1, 7), '...'))
tmp[is.na(tmp)] <- '-'
colnames(tmp) <- c("Name", "CAS", "SMILES","CID", "InChIKey", "CSID")
print(xtable(tmp),
  floating = FALSE,
  hline.after = NULL,
  include.rownames = FALSE,
  add.to.row = list(pos = list(-1,0, 6),
                    command = c('\\toprule\n','\\midrule\n','\\bottomrule\n')),
  sanitize.text.function = function(x){x}
  )
@
\caption{Identifiers for the jagst data sets as queried with webchem. Only the first 6 entries are shown. For SMILES and InChIKey only the first 7 characters are shown. - = not found.}
\label{tab:comptable}
\end{table}



\subsection[Toxicity of different pesticide groups]{Toxicity of different pesticide groups}
Another question we might ask is \emph{How does toxicity vary between insecticide groups?}
Answering this question would require tedious lookup of insecticide groups for each of the 124 CAS numbers in the \code{lc50} data set.
The Compendium of Pesticide Common Names \citep{wood} contains such information and can be easily queried using CAS numbers with webchem: 

<<aw_query, message = FALSE>>=
aw_data <- aw_query(lc50$cas, type = 'cas')
@

To extract the chemical group from the retrieved data set, we write a simple extractor function and apply this to the retrieved data:

<<subactivty, message = FALSE>>=
igroup <- sapply(aw_data, function(y) y$subactivity[1])
igroup[1:3]
@

Figure \ref{fig:fig2} displays the result after additional data cleaning (see supplement for full code).
Overall, it took only 5 R statements to retrieve, clean and plot the data using ggplot2 \citep{ggplot2}.

\begin{figure}[ht]
<<plot_lc50, echo=FALSE, out.width='0.7\\textwidth', fig.height=6>>=
lc50$type <- ifelse(grepl('carbamat', igroup), 'Carbamates',
              ifelse(grepl('neonicotinoid', igroup), 'Neo-\nnicotinoids', 
                ifelse(grepl('pyrethroid', igroup), 'Pyrethroids', 
                  ifelse(grepl('organophosphate', igroup), 'Organo-\nphosphates', 
                         'other'))))
lc50$type <- factor(lc50$type, levels = c("Pyrethroids", "Carbamates", "Organo-\nphosphates", "Neo-\nnicotinoids", "other"))

p <- ggplot(lc50, aes(x = type, y = value)) +
  geom_boxplot(fill = 'grey75') + 
  geom_jitter(width = 0.5) +
  scale_y_log10() +
  labs(y = expression(LC[50~'D.magna, 48h']), x = '') +
  theme_bw() +
  theme(text = element_text(size = 16))
p
@
\caption{Toxicity of different pesticide groups. LC\textsubscript{50} values have been retrieved from EPA ECOTOX database, chemical groups from the Compendium of Pesticide Common Names \citep{wood}}
\label{fig:fig2}
\end{figure}


\subsection[Querying partitioning coefficients]{Querying partitioning coefficients}
Some data sources also provide data on chemical properties that can be queried.
Here we query for the \code{lc50} data the $\mathrm{log}~P_{oct/wat}$ from the SRC PHYSPROP database to build a simple quantitative structure–activity relationship (QSAR) to predict toxicity.

<<qsar, message=FALSE, cache=TRUE, warning=FALSE>>=
pp_data <- pp_query(lc50$cas)
@

The database contains predicted and experimental values.
Extracting $\mathrm{log}~P_{oct/wat}$ from the data object is slightly more complicated,  
because i) for some compounds no data could be found and ii) the data-object has a more complex structure (a data frame within a list).

<<qsar2, warnings = FALSE>>=
lc50$logp <- sapply(pp_data, function(y) {
  if (length(y) == 1 && is.na(y))
    return(NA)
  y$prop$value[y$prop$variable == 'Log P (octanol-water)']
})
@

We opted for this more complex approach, because the information available is very diverse and we cannot provide an extractor function for each purpose.
Moreover, it provides users with high flexibility regarding organisation of their data. 
Nevertheless, in the documentation of each function we provide examples on how to extract more complicated parts of the data.
The resulting data and model is displayed in Figure~\ref{fig:fig3}.

\begin{figure}[ht]
<<plot_qsar, echo=FALSE, out.width='0.7\\textwidth', fig.height=6, warning=FALSE>>=
# model
mod <- lm(log10(value) ~ logp, data = lc50)
coefs <- round(coef(mod), 2) # coeficients
rmse <- round(summary(mod)$sigma, 2) # RMSE

# check data types
logp_type <- sapply(pp_data, function(y){
  if (length(y) == 1 && is.na(y))
    return(NA)
  y$prop$type[y$prop$variable == 'Log P (octanol-water)']
})
tabs <- table(logp_type)
sna <- sum(is.na(logp_type))

p <- ggplot(lc50, aes(x = logp, y = log10(value))) +
  geom_point() +
  geom_smooth(method = 'lm') +
  labs(x = expression(log~P[oct/wat]), y = expression(log~LC[50])) +
  theme_bw()
p
@
\caption{Simple QSAR for predicting log LC\textsubscript{50} of pesticides by log P. 
Log P values have been retrieved from SRC Physprop database (\Sexpr{tabs[2]} experimental data, \Sexpr{tabs[1]} estimated data and \Sexpr{sna} substances without data). 
Blue line indicates the regression model ($\mathrm{log~LC}_{50} = \Sexpr{coefs[1]}\Sexpr{coefs[2]}~\mathrm{log} P$, RMSE = \Sexpr{rmse}).}
\label{fig:fig3}
\end{figure}


\subsection[Regulatory information]{Regulatory information}
Regulatory information is particularly of interest if concentrations exceed national thresholds.
In the European Union (EU) the Water Framework Directive (WFD, \citet{wfd2000directive}) defines Environmental Quality Standards (EQS).
Similarly, the U.S. and Canadian EPA and the WHO define Quality Standards.
Information on these standards can be queried with webchem from the PAN Pesticide Database (using \code{pan\_query()}) and from ETOX (using \code{etox\_targets()}).

In this example we search for the minimum EQS for the EU for the compounds in the \code{jagst} data set, join these with measured concentrations and evaluate wether exceedances occurred..

We re-use the above queried ETOX-IDs to obtain further information from ETOX, namely the MAC-EQS:
<<search_targests, message=FALSE, warning=FALSE>>=
eqs <- etox_targets(ids$etoxid)
ids$mac <- sapply(eqs, function(y){
  if (length(y) == 1 && is.na(y)) {
    return(NA) 
  } else {
    res <- y$res
    min(res[res$Country_or_Region == 'EEC / EU' & 
              res$Designation == 'MAC-EQS', 'Value_Target_LR'])
  }
})
@

Again, the returned information is humongous and we encourage users to study the returned objects and description of the data source.
Here, the column \code{Designation} defines the type of EQS and \code{Value_Target_LR} contains the value.
Unfortunately, we only found MAC-EQS values for 5 substances:

<<mac>>=
(mac <- with(ids, ids[!is.na(mac) & is.finite(mac), 
                      c('etoxid', 'query', 'mac')]))
@

The \code{get_etoxid()} function used to search ETOX-IDs returns also the original substance name (\code{query}),
so that we can easily join the table with MAC values with the measurements table :
<<>>=
jagst_eqs <- merge(jagst, mac, by.x = 'substance', by.y = 'query')
head(jagst_eqs)
@

Finally, we can compare the measured value to the MAC, which reveals that there have been no exceedances of these 5 compounds.




\subsection[Utility functions]{Utility functions}
Furthermore, webchem provides also basic functions to check identifiers that can be used for data quality assessment.
The functions either use simple formatting rules,

<<check_format>>=
is.inchikey('BQJCRHHNABKAKU-KBQPJGBKS-AN')
is.cas('64-17-6')
@

or web resources like ChemSpider
<<check_web>>=
is.inchikey('BQJCRHHNABKAKU-KBQPJGBKSA-5', 
  type = 'chemspider')
@

\section[Discussion]{Discussion}
\subsection[Related software]{Related software}
Within the R ecosystem, there are only a few similar projects:
rpubchem \citep{rpubchem_2014} provides an interface to PubChem.
Similarly, ChemmineR \citep{chemminer_2008}, a mature chemo-informatics package, provides an interface to Pubchem. 
webchem does not provide any chemo-informatic functionality, but integrates access to many data sources.
WikidataR \citep{wikidatar_2016} provides an interface to wikidata that could be used to retrieve chemical data from Wikipedia.
However, it does not provide predefined methods for chemical data like webchem.
Within the Python ecosystem the libraries PubChempy \citep{pubchempy}, ChemSpiPy \citep{chemspipy} and CIRpy \citep{cirpy} are available for similar tasks as those outlined here.
webchem is not specialized and tries to integrate many data sources and for some of these it provides a unique programmatic interface.
The Chemical Translation Service \citep{Wohlgemuth_Haldiya_Willighagen_Kind_Fiehn_2010}, which is also one of the sources that can be queried, allows batch conversion of chemical identifiers.
However, it does not provide access to other data (experimental, modeled or regulatory data).


\subsection[Open Science]{Open Science}
An increasing number of scientific data is becoming publicly available \citep{Gewin_2016, Reichman_Jones_Schildhauer_2011,Boyle_Guha_2011}, either in public data repositories or as supplement to publications.
To be usable for other researchers chemical compounds should be properly identified, not only by chemical names but also with accompanying identifiers like InChIKey, SMILES and authority-assigned identifiers.
webchem provides an easy way to create such meta tables as shown in Table \ref{tab:comptable} and facilitates chemical data availability to researchers.
However, good quality of data is crucial for every analysis \citep{Stieger_2014} and additional effort and methods are needed to validate data quality.

\subsection[Further development]{Further development}
We have outlined only a few use cases that will likely be useful for many researchers.
Given the huge amount of publicly available information, many other possibilities can be envisioned.
webchem is currently under active development and several other data sources have not been implemented yet but may be in the future.
GitHub makes contributing easy and we strongly encourage contribution to the package.
Moreover, comments, feedback and feature requests are highly welcome.


\section[Conclusions]{Conclusions}
Researchers need to have easy access to global knowledge on chemicals.
webchem can save \emph{"hundreds of working hours"} gathering this knowledge \citep{Munch_Galizia_2016}, so that researchers can focus on other tasks.


\section*{Acknowledgements}
We thank all resource maintainers for their work making their data open to the public.
We thank Johannes Ranke and Daniel Münch for their contributions to the webchem package, as well as all users who provided feedback and feature requests. 
We are grateful to Zacharias Steinmetz for valuable comments on the manuscript.


\bibliography{references}

\end{document}
